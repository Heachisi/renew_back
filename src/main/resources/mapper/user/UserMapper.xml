<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.user.UserMapper"> <!-- 매퍼의 네임스페이스 설정 -->

	<select id="getUserList" parameterType="back.model.user.User" resultType="string"> 
		SELECT 
				RN, 
				USER_ID, 
				ADMIN_YN, 
				PASSWORD,
				EMAIL, 
				BIRTHDATE, 
				GENDER, 
				CREATE_DT, 
				UPDATE_DT, 
				DEL_YN 
		FROM ( 
			SELECT B.*, ROWNUM AS RN 
			FROM ( 
				SELECT 
				A.USER_ID, 
				A.ADMIN_YN, 
				A.PASSWORD,
		        A.EMAIL, 
		        A.BIRTHDATE, 
		        A.GENDER, 
		        TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT, 
		        TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT, 
		        A.DEL_YN
		   FROM USERS A <where>
			<if test="searchText != null and searchText != ''">
				AND A.USER_ID LIKE '%' || #{searchText} || '%'
			</if>
			<if test="startDate != null and startDate !=''">
                <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate}, 'YYYY-MM-DD')]]>
            </if>
			<if test="endDate != null and endDate !=''">
                <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate}, 'YYYY-MM-DD')+1]]>
            </if>
		</where>
		ORDER BY A.USER_ID DESC ) B WHERE ROWNUM &lt;= #{endRow} ) WHERE RN >=
		#{startRow} </select>




	<select id="getUserCount" parameterType="back.model.user.User" resultType="int">
		SELECT COUNT(B.USER_ID) FROM ( SELECT A.USER_ID, A.ADMIN_YN, A.PASSWORD,
		A.EMAIL, A.BIRTHDATE, A.GENDER, TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS
		CREATE_DT, TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT, A.DEL_YN
		FROM USERS A <where>
			<if test="searchText != null and searchText != ''">
				AND A.USER_ID LIKE '%' || #{searchText} || '%'
			</if>
			<if test="startDate != null and startDate !=''">
                <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate}, 'YYYY-MM-DD')]]>
            </if>
			<if test="endDate != null and endDate !=''">
                <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate}, 'YYYY-MM-DD')+1]]>
            </if>
		</where>
		ORDER BY A.USER_ID DESC ) B </select>


	<!-- ID 중복 검사 -->
	<select id="checkUserIdDuplicate" parameterType="back.model.user.User"
		resultType="int">
		SELECT COUNT(*) FROM Users WHERE user_id = #{userId}
	</select>

	<!-- 사용자 ID로 사용자 정보 조회 -->
	<select id="getUserById" parameterType="string"
		resultType="back.model.user.User"> 
		SELECT 
		USER_ID, 
		ADMIN_YN, 
		PASSWORD,
		EMAIL, 
		TO_CHAR(BIRTHDATE, 'YYYY-MM-DD') as BIRTHDATE, 
		GENDER, 
		CREATE_DT, 
		CREATE_ID, 
		UPDATE_ID, 
		UPDATE_DT,
		DEL_YN 
		FROM 
		USERS 
		WHERE USER_ID = #{userId} <!-- SQL 매개변수 바인딩 -->
		AND DEL_YN = 'N'
	</select>

	<!-- 사용자 생성 -->
	<insert id="registerUser" parameterType="back.model.user.User">
		INSERT INTO USERS
		(USER_ID,
		PASSWORD,
		EMAIL,
		BIRTHDATE,
		GENDER,
		CREATE_ID)
		VALUES
		(#{userId},
		#{password},
		#{email},
		#{birthdate},
		#{gender},
		#{createId})
	</insert>

	<!-- 사용자 업데이트 -->
	<update id="updateUser" parameterType="back.model.user.User"> UPDATE USERS
		SET EMAIL = #{email}, BIRTHDATE = #{birthdate}, GENDER = #{gender},
		UPDATE_ID = #{updateId}, UPDATE_DT = SYSDATE <if
			test="password != null and password != ''"> , PASSWORD = #{password} <!--
			비밀번호가 제공된 경우만 업데이트 -->
		</if>
		WHERE USER_ID = #{userId} </update>

	<!-- 사용자 삭제 (논리 삭제) -->
	<update id="deleteUser" parameterType="back.model.user.User"> 
	    UPDATE USERS
		SET DEL_YN = 'Y', <!-- 삭제된 사용자 표시 --> 
		UPDATE_ID = #{updateId}, <!-- 삭제를 수행한 관리자 ID --> 
		UPDATE_DT = SYSDATE <!-- 삭제 시간 기록 --> 
		
		WHERE
		USER_ID = #{userId} </update>

	<!-- 모든 사용자 조회 (선택 사항) -->
	<select id="getAllUsers" resultType="back.model.user.User">
		SELECT
		USER_ID,
		EMAIL,
		BIRTHDATE,
		GENDER,
		CREATE_DT,
		UPDATE_DT
		FROM
		USERS
	</select>

	<select id="getAgeGroupCounts" resultType="map">
		SELECT
		a.age_group,
		count(*) AS count
		FROM (
		SELECT
		CASE
		WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM BIRTHDATE) BETWEEN
		10 AND 19 THEN '10대'
		WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM BIRTHDATE) BETWEEN
		20 AND 29 THEN '20대'
		WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM BIRTHDATE) BETWEEN
		30 AND 39 THEN '30대'
		WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM BIRTHDATE) BETWEEN
		40 AND 49 THEN '40대'
		WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM BIRTHDATE) BETWEEN
		50 AND 59 THEN '50대'
		ELSE '기타'
		END AS age_group
		FROM USERS
		WHERE DEL_YN = 'N'
		)a
		GROUP BY a.age_group
	</select>

	<select id="getGenderCounts" resultType="map">
		SELECT GENDER, COUNT(*) AS count
		FROM USERS
		WHERE DEL_YN = 'N'
		GROUP BY GENDER
	</select>

	<update id="toggleUserDeletion" parameterType="back.model.user.User"> 
	    UPDATE
		USERS SET 
		          DEL_YN = #{delYn}, <!-- 'Y' 또는 'N' 값을 동적으로 받음 --> 
		          UPDATE_DT = SYSDATE WHERE USER_ID =#{userId} 
    </update>


</mapper>
